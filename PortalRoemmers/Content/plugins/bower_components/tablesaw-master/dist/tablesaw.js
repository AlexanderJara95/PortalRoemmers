"undefined" == typeof Tablesaw && (Tablesaw = { i18n: { modes: ["Stack", "Swipe", "Toggle"], columns: 'Col<span class="a11y-sm">umn</span>s', columnBtnText: "Columns", columnsDialogError: "No eligible columns.", sort: "Sort" }, mustard: "querySelector" in document && (!window.blackberry || window.WebKitPoint) && !window.operamini }), Tablesaw.config || (Tablesaw.config = {}), Tablesaw.mustard && jQuery(document.documentElement).addClass("tablesaw-enhanced"), function (t) { var e = "table", a = "tablesaw-bar", s = "tablesawcreate", i = "tablesawdestroy", n = "tablesawrefresh", l = function (e) { if (!e) throw new Error("Tablesaw requires an element."); this.table = e, this.$table = t(e), this.mode = this.$table.attr("data-tablesaw-mode") || "stack", this.init() }; l.prototype.init = function () { this.$table.attr("id") || this.$table.attr("id", e + "-" + Math.round(1e4 * Math.random())), this.createToolbar(); var t = this._initCells(); this.$table.trigger(s, [this, t]) }, l.prototype._initCells = function () { var e, a = this.table.querySelectorAll("thead tr"), s = this; return t(a).each(function () { var i = 0; t(this).children().each(function () { var t = parseInt(this.getAttribute("colspan"), 10), n = ":nth-child(" + (i + 1) + ")"; if (e = i + 1, t) for (var l = 0; l < t - 1; l++)n += ", :nth-child(" + (++i + 1) + ")"; this.cells = s.$table.find("tr").not(a[0]).not(this).children().filter(n), i++ }) }), e }, l.prototype.refresh = function () { this._initCells(), this.$table.trigger(n) }, l.prototype.createToolbar = function () { var e = this.$table.prev().filter("." + a); e.length || (e = t("<div>").addClass(a).insertBefore(this.$table)), this.$toolbar = e, this.mode && this.$toolbar.addClass("mode-" + this.mode) }, l.prototype.destroy = function () { this.$table.prev().filter("." + a).each(function () { this.className = this.className.replace(/\bmode\-\w*\b/gi, "") }); var s = this.$table.attr("id"); t(document).unbind("." + s), t(window).unbind("." + s), this.$table.trigger(i, [this]), this.$table.removeData(e) }, t.fn[e] = function () { return this.each(function () { var a = t(this); if (!a.data(e)) { var s = new l(this); a.data(e, s) } }) }, t(document).on("enhance.tablesaw", function (a) { Tablesaw.mustard && t(a.target).find("table[data-tablesaw-mode],table[data-tablesaw-sortable]")[e]() }) }(jQuery), function (t, e, a) { var s = "tablesaw-stack", i = "tablesaw-cell-label", n = "tablesaw-cell-content", l = "tablesaw-stack", o = "data-tablesaw-no-labels", r = "data-tablesaw-hide-empty", c = function (t) { this.$table = e(t), this.labelless = this.$table.is("[" + o + "]"), this.hideempty = this.$table.is("[" + r + "]"), this.labelless || (this.allHeaders = this.$table.find("th")), this.$table.data(l, this) }; c.prototype.init = function (t) { if (this.$table.addClass(s), !this.labelless) { var a = e(this.allHeaders), l = this.hideempty; a.each(function () { var a = e(this), s = e(this.cells).filter(function () { return !(e(this).parent().is("[" + o + "]") || l && e(this).is(":empty")) }), r = s.not(this).filter("thead th").length && " tablesaw-cell-label-top", c = a.find(".tablesaw-sortable-btn"), d = c.length ? c.html() : a.html(); if ("" !== d) if (r) { var h = parseInt(e(this).attr("colspan"), 10), b = ""; h && (b = "td:nth-child(" + h + "n + " + t + ")"), s.filter(b).prepend("<b class='" + i + r + "'>" + d + "</b>") } else s.wrapInner("<span class='" + n + "'></span>"), s.prepend("<b class='" + i + "'>" + d + "</b>") }) } }, c.prototype.destroy = function () { this.$table.removeClass(s), this.$table.find("." + i).remove(), this.$table.find("." + n).each(function () { e(this).replaceWith(this.childNodes) }) }, e(document).on("tablesawcreate", function (t, e, a) { "stack" === e.mode && new c(e.table).init(a) }), e(document).on("tablesawdestroy", function (t, a) { "stack" === a.mode && e(a.table).data(l).destroy() }) }(0, jQuery), function (t) { var e = "tablesawbtn", a = { _create: function () { return t(this).each(function () { t(this).trigger("beforecreate." + e)[e]("_init").trigger("create." + e) }) }, _init: function () { var a = t(this), s = this.getElementsByTagName("select")[0]; return s && t(this).addClass("btn-select")[e]("_select", s), a }, _select: function (e) { var a = function (e, a) { var s, i, n, l = t(a).find("option"); if (l.each(function () { this.selected && (s = document.createTextNode(this.text)) }), n = e.childNodes, l.length > 0) for (var o = 0, r = n.length; o < r; o++)(i = n[o]) && 3 === i.nodeType && e.replaceChild(s, i) }; a(this, e), t(this).bind("change refresh", function () { a(this, e) }) } }; t.fn[e] = function (a, s, i, n) { return this.each(function () { return a && "string" == typeof a ? t.fn[e].prototype[a].call(this, s, i, n) : t(this).data(e + "active") ? t(this) : (t(this).data(e + "active", !0), void t.fn[e].prototype._create.call(this)) }) }, t.extend(t.fn[e].prototype, a) }(jQuery), function (t, e, a) { var s = function (t) { this.$table = e(t), this.classes = { columnToggleTable: "tablesaw-columntoggle", columnBtnContain: "tablesaw-columntoggle-btnwrap tablesaw-advance", columnBtn: "tablesaw-columntoggle-btn tablesaw-nav-btn down", popup: "tablesaw-columntoggle-popup", priorityPrefix: "tablesaw-priority-", toolbar: "tablesaw-bar" }, this.headers = this.$table.find("tr:first > th"), this.$table.data("tablesaw-coltoggle", this) }; s.prototype.init = function () { var t, a, s, i, n, l, o = this; this.$table.addClass(this.classes.columnToggleTable), a = (t = this.$table.attr("id")) + "-popup", l = e("<div class='" + this.classes.columnBtnContain + "'></div>"), s = e("<a href='#" + a + "' class='btn btn-micro " + this.classes.columnBtn + "' data-popup-link><span>" + Tablesaw.i18n.columnBtnText + "</span></a>"), i = e("<div class='dialog-table-coltoggle " + this.classes.popup + "' id='" + a + "'></div>"), n = e("<div class='btn-group'></div>"); var r, c = !1; function d(a) { a && e(a.target).closest("." + o.classes.popup).length || (e(document).unbind("click." + t), s.removeClass("up").addClass("down"), l.removeClass("visible")) } e(this.headers).not("td").each(function () { var t = e(this), a = t.attr("data-tablesaw-priority"), s = o.$getCells(this); a && "persist" !== a && (s.addClass(o.classes.priorityPrefix + a), e("<label><input type='checkbox' checked>" + t.text() + "</label>").appendTo(n).children(0).data("tablesaw-header", this), c = !0) }), c || n.append("<label>" + Tablesaw.i18n.columnsDialogError + "</label>"), n.appendTo(i), n.find('input[type="checkbox"]').on("change", function (t) { var e = t.target.checked; o.$getCellsFromCheckbox(t.target).toggleClass("tablesaw-cell-hidden", !e).toggleClass("tablesaw-cell-visible", e), o.$table.trigger("tablesawcolumns") }), s.appendTo(l), l.appendTo(this.$table.prev().filter("." + this.classes.toolbar)), s.on("click.tablesaw", function (a) { a.preventDefault(), l.is(".visible") ? d() : (l.addClass("visible"), s.removeClass("down").addClass("up"), e(document).unbind("click." + t, d), window.clearTimeout(r), r = window.setTimeout(function () { e(document).one("click." + t, d) }, 15)) }), i.appendTo(l), this.$menu = n, e(window).on("resize." + t, function () { o.refreshToggle() }), this.refreshToggle() }, s.prototype.$getCells = function (t) { return e(t).add(t.cells) }, s.prototype.$getCellsFromCheckbox = function (t) { var a = e(t).data("tablesaw-header"); return this.$getCells(a) }, s.prototype.refreshToggle = function () { var t = this; this.$menu.find("input").each(function () { this.checked = "table-cell" === t.$getCellsFromCheckbox(this).eq(0).css("display") }) }, s.prototype.refreshPriority = function () { var t = this; e(this.headers).not("td").each(function () { var a = e(this), s = a.attr("data-tablesaw-priority"), i = a.add(this.cells); s && "persist" !== s && i.addClass(t.classes.priorityPrefix + s) }) }, s.prototype.destroy = function () { this.$table.removeClass(this.classes.columnToggleTable), this.$table.find("th, td").each(function () { e(this).removeClass("tablesaw-cell-hidden").removeClass("tablesaw-cell-visible"), this.className = this.className.replace(/\bui\-table\-priority\-\d\b/g, "") }) }, e(document).on("tablesawcreate", function (t, e) { "columntoggle" === e.mode && new s(e.table).init() }), e(document).on("tablesawdestroy", function (t, a) { "columntoggle" === a.mode && e(a.table).data("tablesaw-coltoggle").destroy() }) }(0, jQuery), function (t, e, a) { e.extend(Tablesaw.config, { swipe: { horizontalThreshold: 15, verticalThreshold: 30 } }); var s = { toolbar: "tablesaw-bar", hideBtn: "disabled", persistWidths: "tablesaw-fix-persist", allColumnsVisible: "tablesaw-all-cols-visible" }; function i(a) { var i, n, l = e("<div class='tablesaw-advance'></div>"), o = e("<a href='#' class='tablesaw-nav-btn btn btn-micro left' title='Previous Column'></a>").appendTo(l), r = e("<a href='#' class='tablesaw-nav-btn btn btn-micro right' title='Next Column'></a>").appendTo(l), c = a.find("thead th"), d = c.not('[data-tablesaw-priority="persist"]'), h = [], b = e(document.head || "head"), u = a.attr("id"), p = (i = document.createElement("div"), n = i.getElementsByTagName("i"), i.innerHTML = "\x3c!--[if lte IE 8]><i></i><![endif]--\x3e", !n.length); if (!c.length) throw new Error("tablesaw swipe: no header cells found. Are you using <th> inside of <thead>?"); function f(t) { return e(t.cells).add(t) } function w(t) { f(t).removeClass("tablesaw-cell-hidden") } function m(t) { f(t).addClass("tablesaw-cell-hidden") } function v() { var t, i = "#" + u + ".tablesaw-swipe ", n = [], l = a.width(), o = []; c.each(function (t) { var a; e(this).is('[data-tablesaw-priority="persist"]') && (a = e(this).outerWidth()) < .75 * l && (o.push(t + "-" + a), n.push(i + " .tablesaw-cell-persist:nth-child(" + (t + 1) + ") { width: " + a + "px; }")) }), t = o.join("_"), a.addClass(s.persistWidths); var r = e("#" + u + "-persist"); r.length && r.data("hash") === t || (r.remove(), n.length && e("<style>" + n.join("\n") + "</style>").attr("id", u + "-persist").data("hash", t).appendTo(b)) } function g() { var t, a = []; return d.each(function (s) { var i = e(this), n = "none" === i.css("display") || i.is(".tablesaw-cell-hidden"); if (n || t) { if (n && t) return a[1] = s, !1 } else t = !0, a[0] = s }), a } function y() { var t = g(); return [t[1] - 1, t[0] - 1] } function C(t) { return t[1] > -1 && t[1] < d.length } function T() { if (!(i = a.attr("data-tablesaw-swipe-media")) || "matchMedia" in t && t.matchMedia(i).matches) { var i, n = a.parent().width(), l = [], o = 0, r = [], d = c.length; c.each(function (t) { var a = e(this).is('[data-tablesaw-priority="persist"]'); l.push(a), o += h[t] + (a ? 0 : 20), r.push(o), (a || o > n) && d-- }); var b = 0 === d; c.each(function (t) { l[t] ? f(this).addClass("tablesaw-cell-persist") : r[t] <= n || b ? (b = !1, w(this)) : m(this) }), p && (a.removeClass(s.persistWidths), e("#" + u + "-persist").remove()), a.trigger("tablesawcolumns") } } function $(t) { var e = t ? g() : y(); C(e) && (isNaN(e[0]) && (e[0] = t ? 0 : d.length - 1), p && v(), m(d.get(e[0])), w(d.get(e[1])), a.trigger("tablesawcolumns")) } function x(t, e) { return (t.touches || t.originalEvent.touches)[0][e] } a.css("width", "auto"), c.each(function () { h.push(e(this).outerWidth()) }), a.css("width", ""), l.appendTo(a.prev().filter(".tablesaw-bar")), a.addClass("tablesaw-swipe"), u || (u = "tableswipe-" + Math.round(1e4 * Math.random()), a.attr("id", u)), o.add(r).click(function (t) { $(!!e(t.target).closest(r).length), t.preventDefault() }), a.bind("touchstart.swipetoggle", function (a) { var s, i, n = x(a, "pageX"), l = x(a, "pageY"); e(t).off("resize", T), e(this).bind("touchmove", function (t) { s = x(t, "pageX"), i = x(t, "pageY"); var e = Tablesaw.config.swipe; Math.abs(s - n) > e.horizontalThreshold && Math.abs(i - l) < e.verticalThreshold && t.preventDefault() }).bind("touchend.swipetoggle", function () { var a = Tablesaw.config.swipe; Math.abs(i - l) < a.verticalThreshold && (s - n < -1 * a.horizontalThreshold && $(!0), s - n > a.horizontalThreshold && $(!1)), window.setTimeout(function () { e(t).on("resize", T) }, 300), e(this).unbind("touchmove touchend") }) }).bind("tablesawcolumns.swipetoggle", function () { var t = C(y()), e = C(g()); o[t ? "removeClass" : "addClass"](s.hideBtn), r[e ? "removeClass" : "addClass"](s.hideBtn), o.closest("." + s.toolbar)[t || e ? "removeClass" : "addClass"](s.allColumnsVisible) }).bind("tablesawnext.swipetoggle", function () { $(!0) }).bind("tablesawprev.swipetoggle", function () { $(!1) }).bind("tablesawdestroy.swipetoggle", function () { var a = e(this); a.removeClass("tablesaw-swipe"), a.prev().filter(".tablesaw-bar").find(".tablesaw-advance").remove(), e(t).off("resize", T), a.unbind(".swipetoggle") }), T(), e(t).on("resize", T) } e(document).on("tablesawcreate", function (t, e) { "swipe" === e.mode && i(e.$table) }) }(this, jQuery), function (t) { function e(e) { return t.map(e.childNodes, function (e) { var a = t(e); return a.is("input, select") ? a.val() : a.hasClass("tablesaw-cell-label") ? void 0 : t.trim(a.text()) }).join("") } var a = "tablesaw-sortable", s = "data-tablesaw-sortable-default-col", i = { head: a + "-head", ascend: a + "-ascending", descend: a + "-descending", switcher: a + "-switch", tableToolbar: "tablesaw-toolbar", sortButton: a + "-btn" }, n = { _create: function (e) { return t(this).each(function () { if (t(this).data("init" + a)) return !1; t(this).data("init" + a, !0).trigger("beforecreate." + a)[a]("_init", e).trigger("create." + a) }) }, _init: function () { var n, l, o, r, c, d, h = t(this), b = function (e) { t.each(e, function (e, a) { var n = t(a); n.removeAttr(s), n.removeClass(i.ascend), n.removeClass(i.descend) }) }; h.addClass(a), n = h.find("thead th[data-" + a + "-col]"), o = n, t.each(o, function (e, a) { t(a).addClass(i.head) }), r = n, c = function (e) { if (!t(e.target).is("a[href]")) { e.stopPropagation(); var s = t(this).parent(), o = e.data.col, r = n.index(s); b(s.siblings()), s.hasClass(i.descend) ? (h[a]("sortBy", o, !0), r += "_asc") : (h[a]("sortBy", o), r += "_desc"), l && l.find("select").val(r).trigger("refresh"), e.preventDefault() } }, t.each(r, function (e, a) { var s = t("<button class='" + i.sortButton + "'/>"); s.bind("click", { col: a }, c), t(a).wrapInner(s) }), d = n, t.each(d, function (e, a) { var n = t(a); n.is("[" + s + "]") && (n.hasClass(i.descend) || n.addClass(i.ascend)) }), h.is("[data-tablesaw-sortable-switch]") && function (n) { l = t("<div>").addClass(i.switcher).addClass(i.tableToolbar).html(function () { var a = ["<label>" + Tablesaw.i18n.sort + ":"]; return a.push('<span class="btn btn-small">&#160;<select>'), n.each(function (n) { var l = t(this), o = l.is("[" + s + "]"), r = l.hasClass(i.descend), c = l.is("[data-sortable-numeric]"), d = 0; t(this.cells).slice(0, 5).each(function () { isNaN(parseInt(e(this), 10)) || d++ }); var h = 5 === d; c || l.attr("data-sortable-numeric", h ? "" : "false"), a.push("<option" + (o && !r ? " selected" : "") + ' value="' + n + '_asc">' + l.text() + " " + (h ? "&#x2191;" : "(A-Z)") + "</option>"), a.push("<option" + (o && r ? " selected" : "") + ' value="' + n + '_desc">' + l.text() + " " + (h ? "&#x2193;" : "(Z-A)") + "</option>") }), a.push("</select></span></label>"), a.join("") }); var o = h.prev().filter(".tablesaw-bar"), r = o.children().eq(0); r.length ? l.insertBefore(r) : l.appendTo(o), l.find(".btn").tablesawbtn(), l.find("select").on("change", function () { var e = t(this).val().split("_"), s = n.eq(e[0]); b(s.siblings()), h[a]("sortBy", s.get(0), "asc" === e[1]) }) }(n, h.find("tbody tr:nth-child(-n+3)")) }, getColumnNumber: function (e) { return t(e).prevAll().length }, getTableRows: function () { return t(this).find("tbody tr") }, sortRows: function (a, s, i, n) { var l, o, r, c; r = a, c = [], t.each(r, function (a, i) { var n = t(i).children().get(s); c.push({ element: n, cell: e(n), rowNum: a }) }), l = c; var d, h, b, u = t(n).data("tablesaw-sort"); return o = !(!u || "function" != typeof u) && u(i) || (d = i, h = t(n).is("[data-sortable-numeric]") && !t(n).is('[data-sortable-numeric="false"]'), b = /[^\-\+\d\.]/g, d ? function (t, e) { return h ? parseFloat(t.cell.replace(b, "")) - parseFloat(e.cell.replace(b, "")) : t.cell.toLowerCase() > e.cell.toLowerCase() ? 1 : -1 } : function (t, e) { return h ? parseFloat(e.cell.replace(b, "")) - parseFloat(t.cell.replace(b, "")) : t.cell.toLowerCase() < e.cell.toLowerCase() ? 1 : -1 }), a = function (t, e) { var a, s, i, n = []; for (a = 0, s = t.length; a < s; a++)i = t[a].rowNum, n.push(e[i]); return n }(l.sort(o), a) }, replaceTableRows: function (e) { t(this).find("tbody").html(e) }, makeColDefault: function (e, a) { var n = t(e); n.attr(s, "true"), a ? (n.removeClass(i.descend), n.addClass(i.ascend)) : (n.removeClass(i.ascend), n.addClass(i.descend)) }, sortBy: function (e, s) { var i, n, l = t(this); i = l[a]("getColumnNumber", e), n = l[a]("getTableRows"), n = l[a]("sortRows", n, i, s, e), l[a]("replaceTableRows", n), l[a]("makeColDefault", e, s) } }; t.fn[a] = function (e) { var s, i = Array.prototype.slice.call(arguments, 1); return e && "string" == typeof e ? void 0 !== (s = t.fn[a].prototype[e].apply(this[0], i)) ? s : t(this) : (t(this).data(a + "data") || (t(this).data(a + "active", !0), t.fn[a].prototype._create.call(this, e)), t(this)) }, t.extend(t.fn[a].prototype, n), t(document).on("tablesawcreate", function (t, e) { e.$table.is("table[data-tablesaw-sortable]") && e.$table[a]() }) }(jQuery), function (t, e, a) { var s = { attr: { init: "data-tablesaw-minimap" } }; function i(a) { var i = e('<div class="tablesaw-advance minimap">'), n = e('<ul class="tablesaw-advance-dots">').appendTo(i), l = "tablesaw-advance-dots-hide"; function o() { if (!(o = a.attr(s.attr.init)) || t.matchMedia && t.matchMedia(o).matches) { var o; i.show(); var r = n.find("li").removeClass(l); a.find("thead th").each(function (t) { "none" === e(this).css("display") && r.eq(t).addClass(l) }) } else i.hide() } a.find("thead th").each(function () { n.append("<li><i></i></li>") }), i.appendTo(a.prev().filter(".tablesaw-bar")), o(), e(t).on("resize", o), a.bind("tablesawcolumns.minimap", function () { o() }).bind("tablesawdestroy.minimap", function () { var a = e(this); a.prev().filter(".tablesaw-bar").find(".tablesaw-advance").remove(), e(t).off("resize", o), a.unbind(".minimap") }) } e(document).on("tablesawcreate", function (t, e) { "swipe" !== e.mode && "columntoggle" !== e.mode || !e.$table.is("[ " + s.attr.init + "]") || i(e.$table) }) }(this, jQuery), function (t, e) { var a = { selectors: { init: "table[data-tablesaw-mode-switch]" }, attributes: { excludeMode: "data-tablesaw-mode-exclude" }, classes: { main: "tablesaw-modeswitch", toolbar: "tablesaw-toolbar" }, modes: ["stack", "swipe", "columntoggle"], init: function (t) { var s = e(t), i = s.attr(a.attributes.excludeMode), n = s.prev().filter(".tablesaw-bar"), l = e("<div>").addClass(a.classes.main + " " + a.classes.toolbar).html(function () { var t, e = ["<label>" + Tablesaw.i18n.columns + ":"], n = s.attr("data-tablesaw-mode"); e.push('<span class="btn btn-small">&#160;<select>'); for (var l = 0, o = a.modes.length; l < o; l++)i && i.toLowerCase() === a.modes[l] || ((t = n === a.modes[l]) && a.modes[l], e.push("<option" + (t ? " selected" : "") + ' value="' + a.modes[l] + '">' + Tablesaw.i18n.modes[l] + "</option>")); return e.push("</select></span></label>"), e.join("") }), o = n.find(".tablesaw-advance").eq(0); o.length ? l.insertBefore(o) : l.appendTo(n), l.find(".btn").tablesawbtn(), l.find("select").bind("change", a.onModeChange) }, onModeChange: function () { var t = e(this), s = t.closest("." + a.classes.main), i = t.closest(".tablesaw-bar").nextUntil(i).eq(0), n = t.val(); s.remove(), i.data("table").destroy(), i.attr("data-tablesaw-mode", n), i.table() } }; e(t.document).on("tablesawcreate", function (t, e) { e.$table.is(a.selectors.init) && a.init(e.table) }) }(this, jQuery);